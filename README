

Experimental Small C for Noam Nisan's often used Hack/Nand2Tetris
academic processor as described in Nisan's _The Elements of
Computing Systems: Building a Modern Computer from First
Principels_ based on Chris Lewis' version of the original
Small C compiler by James E. Hendrix and published in
Dr. Dobbs Journal.  Chris Lewis' README is preserved below the cut.

There's nothing modern about Nisan's platform, despite the name.  Not
wanting to write one more line of assembly for this complete dog,
especially not a bubble sort implementation, motiviated me to get a
compiler going.  The complete mudsucker doesn't even have a jsr
(more on that in a minute).  Not only was the 68000 always vastly
shorter than the backend implement for Nisan's ISA, so was the 8080.

Anyway, method calls are not implemented, nor are most of the logic
ops.  I'm not sure that stack handling will continue to work for
subroutines.  I implemented what I needed for the bubble sort
code in test.c and now I'm out of time at least until I actually
finish my homework for the week or likely forever.

Despite the lack of any type of jsr, operating on the program
counter, pushing the program counter to the stack that doesn't
exist in the processor (ha), manually linking returns from a
register after a jsr that doesn't push to the non-existant, it should
still be possible to implement subroutines/method calls by generating
a label for the return position, loading that, pushing it on to a
user-maintained stack as I've implemented in here, then jumping.
A return of course would be a jump to that after fetching it off
the stack.

No "secondary register" is used in this implementation because
the Nisan machine ain't got one.  Seroiusly though, the A register
could be used if absolutely no memory access was needed.  That may
or may not hold.  I didn't check.  As it is, the secondary register
is always just the stack top.  An evaluation stack is strictly
required but a "secondary register" is not.

imo it would be an improvement to have a separate evaluation stack
from call/local variable stack.  A pretty small evaluation stack
should serve fine and would simplify finding and accessing local
vars on the stack by the compiler.  That reminds me that I did a
strange thing and made the stack grow up instead of down even though
that wound up causing grief and requiring changes outside of the
backend.  All of the other backends are almost certainly broken
by those changes.  I just wanted to be able to see the stack in
low memory next to other critical variables in the CPU Emulator
Java app but as it turns out, the stack pointer really is the
only other variable and it could go to high memory immediately
above the stack.  Either by making the stack grow downward again
or by making that controlled by methods in the code generating
backend (code_nisan.c in this case), it would be nice to fix that.
(I was also suspecting that negative integer handling was corrupting
the stkp stack pointer but it was not.)

Also, this very much did not build on clang 11.1.0 which hated
non-void functions returning empty.  I should have just modified
those to return 0 instead of adding "void", or else this Small C
should be modified to ignore the "void" keyword before functions.
Either way, I broke it from being self compiling with that.  Really,
all of this was a hasty first pass.  Also, this compiler was very
much broken on 64 bit architectures.  I sparked some 'long's around
like pixie dust until it started working.  So to be eslf-hosting
again, it could ignore "long" before variables.

Look for "XXX" in the code for un-done stuff and left over cruft.
Look for "TODO" in the generated assembly code where implementations
of operations is known to be not done.  Signed comparison isn't yet
implemented.

---------------8<---------------------------------------------------------

			Small C version C3.0R1.1
			      (SCC3)

			    Chris Lewis

This directory contains the source for a version of Ron Cain's Small C 
compiler that I have heavily modified - beyond the Small-C V2.0 later
published in Dr. Dobbs.  This compiler generates assembler source code that
needs to be assembled and linked to make a running program.

Small C is a public domain compiler for a subset of C.  The main things
lacking are "#if", structs/unions, doubles/floats/longs and more than
one level of indirection.  Even so, it's powerful enough to be able to
compile itself.  It's also lots of fun to play around with.  It could
use lots of more work (eg: a real scanner), but what the heck...
Retargetting the compiler requires only relinking the frontend with a new
code generator.

Code generators for 6809 (MIT UNIX-like assembler), M68K (Motorola V/68 UNIX
assembler), VAX (BSD 4.1 assembler), and 8080 (RMAC assembler) are provided.

Users having access to System V make should be able to use the Makefile 
without any modification except for INCDIR and LIBDIR (where you'd like 
to put the compiler itself).

Users not having access to System V will probably have to rewrite the Makefile.
[ I have provided a Makefile that seems to work with bsd systems - mod]

WARNING: you will probably see a great deal of compilation warnings when
you compile this compiler with a "real" UNIX C.  Don't worry - this is
*perfectly* normal - Small C is a subset of real C, and in order to
keep the compiler in this subset you have to bend the rules somewhat.
The only time where this might cause a problem is where pointers are
"different" from ints (ie: different length or on non-byte-addressible
machines).  Small C assumes that ints are the same as pointers.

Invocation:
	scc<6809|vax|m68k|8080> filename

There are other options available - see main.c for details.

The code generated by these compilers need a run-time support library
for two things: operations that are "hard" on a particular processor
(eg: 16 bit multiply on an 8080), or O/S interface (vax is BSD 4.1,
6809 is FLEX, 8080 is CPM, never had one for M68k).

Status: the 6809, VAX and 8080 versions work last I checked - a problem or
two may have crept in during the implementation of the compile/assemble/and
link code for machines that support it.  The M68k version has never been
tested.  I don't have a Pyramid version because Pyrcorp seems reluctant
to publish instruction set information.

So you want to write a new coder do you?  Well, it's easy - read the
comments in one of the coders.  You should not have to modify *any* of
the existing files, just write a new codexxx.c file.  Please contact
me if you run into trouble.  I would be greatly interested in any new
coders or bug reports in the compilers.  As far as I am aware, the
major restriction on porting this thing for different targets is that
pointers and integers *must* be the same length, alignment, and be
interchangeable.
